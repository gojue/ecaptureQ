name: PR Build and Test

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

# Êéà‰∫àÂ∑•‰ΩúÊµÅÂÜôÂÖ•ÊùÉÈôêÔºåÁî®‰∫éÂàõÂª∫ Release Âíå‰∏ä‰º†‰∫ßÁâ©
permissions:
  contents: write
  issues: write
  pull-requests: write

# ÂÆö‰πâÁéØÂ¢ÉÂèòÈáè
env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

# Á°Æ‰øùÊØè‰∏™Êèê‰∫§Âè™ËøêË°å‰∏ÄÊ¨°Â∑•‰ΩúÊµÅ
concurrency:
  group: "${{ github.workflow }} - ${{ github.head_ref || github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # ‰ªªÂä° 1: Ê£ÄÊü• Git Tag Âíå package.json ÁöÑÁâàÊú¨ÊòØÂê¶‰∏ÄËá¥
  check_tag_version:
    name: Check Release Tag and package.json Version Consistency
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get version from package.json
        id: get_version
        run: |
          PKG_VERSION=$(jq -r .version package.json)
          echo "package.json version: $PKG_VERSION"
          echo "version=${PKG_VERSION}" >> $GITHUB_OUTPUT

  # ‰ªªÂä° 2: ‰∏∫ Windows, macOS, Linux, Âíå Android ÊûÑÂª∫ÂíåÂèëÂ∏É
  build-debug-artifacts:
    name: Build and Release
    needs: check_tag_version
    strategy:
      fail-fast: false
      matrix:
        # ÂÆö‰πâÈúÄË¶ÅÊûÑÂª∫ÁöÑÂπ≥Âè∞ÂíåÊû∂ÊûÑ
        include:
          # Windows
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            arch: x86_64
          - os: windows-latest
            platform: windows
            target: aarch64-pc-windows-msvc
            arch: aarch64
          # macOS
          - os: macos-latest
            platform: macos
            target: aarch64-apple-darwin
            arch: aarch64
          - os: macos-latest
            platform: macos
            target: x86_64-apple-darwin
            arch: x86_64
          # Linux
          - os: ubuntu-22.04
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: x86_64
          - os: ubuntu-22.04
            platform: linux
            target: aarch64-unknown-linux-gnu
            arch: aarch64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ÂÆâË£Ö Rust Stable
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      # Ê∑ªÂä† Rust ÁºñËØëÁõÆÊ†á
      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      # Rust ÁºìÂ≠ò
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          save-if: false

      # ‰ªÖÂú® Ubuntu ‰∏äÂÆâË£Ö‰æùËµñ
      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libgtk-3-dev libssl-dev xdg-utils librsvg2-dev libappindicator3-dev  patchelf

      - name: Download and setup eCapture for ${{ matrix.arch }}
        shell: bash
        if: matrix.platform == 'linux'
        run: |
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            ECAPTURE_ARCH="amd64"
          else
            ECAPTURE_ARCH="arm64"
          fi
          pwd
          ECAPTURE_LATEST=$(curl -s https://api.github.com/repos/gojue/ecapture/releases/latest | grep tag_name | cut -d '"' -f 4)
          if [[ $? -ne 0 ]]; then
            echo "Failed to fetch the latest release."
            exit 1
          fi

          ECAPTURE_TAR="ecapture-${ECAPTURE_LATEST}-${{ matrix.platform }}-${ECAPTURE_ARCH}.tar.gz"
          ECAPTURE_DIR="ecapture-${ECAPTURE_LATEST}-${{ matrix.platform }}-${ECAPTURE_ARCH}"

          wget "https://github.com/gojue/ecapture/releases/download/${ECAPTURE_LATEST}/${ECAPTURE_TAR}" || { echo "Download failed"; exit 1; }
          tar -zxvf "${ECAPTURE_TAR}" || { echo "Extract failed"; exit 1; }

          mkdir -p src-tauri/binaries
          cp "${ECAPTURE_DIR}/ecapture" src-tauri/binaries/${{ matrix.platform }}_ecapture_${ECAPTURE_ARCH} || { echo "Copy failed"; exit 1; }
          ls src-tauri/binaries/

      # ËÆæÁΩÆ Node.js ÁéØÂ¢É
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      
      # ËÆæÁΩÆ pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: latest

      # ÂÆâË£ÖÂâçÁ´Ø‰æùËµñ
      - name: Pnpm install
        run:
          pnpm i
          pnpm tauri icon

      # Tauri ÊûÑÂª∫
      - name: Tauri build (Linux)
        if: matrix.platform == 'linux'
        env:
          DECOUPLED_MODE: true
        run: |
            pnpm tauri build
      - name: Tauri build (macOS/Windows)
        if: matrix.platform != 'linux'
        env:
          DECOUPLED_MODE: true
        run: |
          pnpm tauri build

      - name: Upload artifacts (Linux)
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'linux'
        with:
          name: eCaptureQ-pr${{ github.event.number }}-${{ github.run_id }}-${{ matrix.arch }}.AppImage
          retention-days: 7
          path: src-tauri/target/release/bundle/appimage/eCaptureQ*.AppImage

      - name: Upload artifacts (macOS)
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'macos'
        with:
          name: eCaptureQ-pr${{ github.event.number }}-${{ github.run_id }}-${{ matrix.arch }}.dmg
          retention-days: 7
          path: |
            src-tauri/target/release/bundle/dmg/eCaptureQ*.dmg

      - name: Upload artifacts (Windows)
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'windows'
        with:
          name: eCaptureQ-pr${{ github.event.number }}-${{ github.run_id }}-${{ matrix.arch }}.msi
          retention-days: 7
          path: |
            src-tauri/target/release/bundle/msi/eCaptureQ*.msi
      - name: Sign Android APK
        if: matrix.platform == 'android'
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: src-tauri/gen/android/app/build/outputs/apk/universal/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGN_DEBUG_KEY }}
          alias: ${{ secrets.ANDROID_SIGN_DEBUG_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_SIGN_DEBUG_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_SIGN_DEBUG_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eCaptureQ-pr${{ github.event.number }}-${{ github.run_id }}-${{ matrix.arch }}.apk
          retention-days: 7
          path: |
            src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk

  comment-pr:
    runs-on: ubuntu-22.04
    name: Comment PR with Download Links
    needs: build-debug-artifacts
    steps:
      - name: Comment PR with Download Links
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.runId;
            const prNumber = context.payload.pull_request.number;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üîß **Debug Build Complete (macOS„ÄÅLinux„ÄÅWindows)**

              üì¶ Download Links:
              - [PR ${prNumber} Debug Binary](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId})

              ‚è∞ Files will be retained for 7 days, please download and test promptly.`
            });